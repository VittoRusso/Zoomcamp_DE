#!/usr/bin/env python
# coding: utf-8

import argparse
import os
import pandas as pd
from sqlalchemy import create_engine
from time import time

def main(params):
    user = params.user
    password = params.password
    host = params.host
    port = params.port
    db_name = params.db_name
    table_name = params.table_name
    csv_url = params.csv_url

    csv_name = 'output.csv'

    os.system(f'wget {csv_url} - O {csv_name}')

    # Instantiate the engine connection to postgres db
    engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{db_name}')

    # Create an iterator object of the csv file in chunksizes of 100000 rows
    df_iter = pd.read_csv(f'{csv_url}', iterator=True, chunksize=100000)

    # Get the first iter of the dataset
    df = next(df_iter)

    # Fix the datatype of datetime attributes
    df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
    df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

    # Create the table with the schema generated by the dataframe given head with n=0
    df.head(n=0).to_sql(name=f'{table_name}', con=engine, if_exists='replace')

    # Insert the first chunk to the dataset with if exists append
    df.to_sql(name=f'{table_name}', con=engine, if_exists='append')

    # Insert all the chunks in the iterator object
    for chunk in df_iter:
        t_start = time()
        chunk.to_sql(name=f'{table_name}', con=engine, if_exists='append')
        t_end = time()
        print('Inserted a chunk, took %.3f seconds' %(t_end - t_start))

    print('Finished Insertion')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description= 'Ingest CSV data into Postgres DB')

    # Arguments needed: User, Password, Host, Port, Database name, Table name
    # URL of the csv file

    parser.add_argument('--user', help='username of postgres db server')
    parser.add_argument('--password', help='password of postgres db server')
    parser.add_argument('--host', help='host of postgres db server')
    parser.add_argument('--port', help='port of postgres db server')
    parser.add_argument('--db_name', help='dbname of postgres db server')
    parser.add_argument('--table_name', help='tablename of postgres db server')

    parser.add_argument('--csv_url', help='CSV URL of postgres db server')

    args = parser.parse_args()

    main(args)